apiVersion: v1
data:
  app.module.ts: |
    import { Module } from '@nestjs/common';
    import { UsersModule } from './users/users.module';
    import { AuthModule } from './auth/auth.module';
    import { FirebaseModule } from './firebase/firebase.module';
    import { ConfigModule, ConfigService } from '@nestjs/config';
    import { DrizzlePGModule } from '@knaadh/nestjs-drizzle-pg';
    import { DB_TAG } from './db/constants';
    import { LotsModule } from './lots/lots.module';
    import { ReservationsModule } from './reservations/reservations.module';
    import { MetricsModule } from './metrics/metrics.module';
    import schema from './db/schema';
    import { MetricsInterceptor } from './metrics/metrics.interceptor';
    import { APP_INTERCEPTOR } from '@nestjs/core';

    @Module({
      imports: [
        DrizzlePGModule.registerAsync({
          tag: DB_TAG,
          imports: [ConfigModule],
          inject: [ConfigService],
          useFactory: (configService: ConfigService) => ({
            pg: {
              connection: 'client',
              config: {
                connectionString: configService.getOrThrow('DB_URL'),
              },
            },
            config: {
              dialect: 'postgresql',
              casing: 'snake_case',
              schema: { ...schema },
            },
          }),
        }),
        ConfigModule.forRoot({ isGlobal: true }),
        AuthModule,
        UsersModule,
        FirebaseModule,
        LotsModule,
        ReservationsModule,
        MetricsModule,
      ],
      controllers: [],
      providers: [
        {
          provide: APP_INTERCEPTOR,
          useClass: MetricsInterceptor,
        },
      ],
    })
    export class AppModule {}
  main.ts: |
    import { NestFactory } from '@nestjs/core';
    import { AppModule } from './app.module';
    import { ValidationPipe } from '@nestjs/common';

    async function bootstrap() {
      const app = await NestFactory.create(AppModule);

      app.useGlobalPipes(new ValidationPipe({ transform: true }));

      await app.listen(process.env.PORT ?? 3000);
    }
    bootstrap();
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: server
  name: server-cm0
